{"version":3,"sources":["playground.tsx","snippets/search.ts","snippets/pinboard.ts","snippets/app.ts","preview.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Page","snippetMap","Search","searchEmbedSnippet","Viz","pinboardEmbedSnippet","App","appEmbedSnippet","compileSnippet","template","params","str","key","val","replace","RegExp","getCompiledSnippet","pageId","Playground","editorRef","useRef","onEditorMount","editor","monaco","current","resetPreview","document","getElementById","innerHTML","executeCode","code","getValue","eval","e","console","log","height","width","defaultLanguage","defaultValue","value","options","minimap","enabled","onMount","className","onClick","Preview","id","getParams","queryString","window","location","search","charAt","substring","length","split","paramMap","forEach","kv","useState","hash","setPageId","htmlFor","type","role","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TsEmbedSdk","ReactDOM","render","StrictMode"],"mappings":"ouCASYA,M,SAAAA,K,gBAAAA,E,UAAAA,E,WAAAA,Y,KAMZ,IAAMC,YAAU,gMACbD,KAAKE,OAASC,iDADD,iLAEbH,KAAKI,IAAMC,mDAFE,iLAGbL,KAAKM,IAAMC,8CAHE,aAQhB,SAASC,eAAeC,EAAkBC,GACxC,IAAIC,EAAMF,EACV,IAAK,IAAIG,KAAOF,EAAQ,CACtB,IAAMG,EAAMH,EAAOE,GACnBD,EAAMA,EAAIG,QAAQ,IAAIC,OAAJ,aAAiBH,EAAjB,MAA0B,MAAOC,GAGrD,OAAOF,EAGT,SAASK,mBAAmBC,EAAcP,GACxC,OAAOF,eAAeP,WAAWgB,GAASP,GAQ5C,SAASQ,WAAT,MAA0D,IAApCD,OAAmC,KAAnCA,OAAQP,OAA2B,KAA3BA,OACtBS,UAAYC,kDAAO,MAEzB,SAASC,cAAcC,EAAaC,GAClCJ,UAAUK,QAAUF,EAGtB,SAASG,eAEPC,SAASC,eAAe,YAAYC,UAAY,GAGlD,SAASC,cAEP,IAAMC,KAAOX,UAAUK,QAAQO,WAC/B,IACEN,eACAO,KAAKF,MACL,MAAOG,GACPC,QAAQC,IAAIF,IAIhB,OACE,6EACE,2DAAC,oDAAD,CACEG,OAAO,OACPC,MAAM,QACNC,gBAAgB,aAChBC,aAAa,GACbC,MAAOxB,mBAAmBC,OAAQP,QAClC+B,QAAS,CAAEC,QAAS,CAAEC,SAAS,IAC/BC,QAASvB,gBAEX,qEAAQwB,UAAU,SAASC,QAASjB,YAApC,2BAOSX,kC,+BCnFD,sV,6BCAA,yX,6BCAA,U,8LCUC6B,MARf,WACE,OACE,qBAAKF,UAAU,UAAf,SACE,qBAAKG,GAAG,gB,MCQd,SAASC,IACP,IAAIC,EAAcC,OAAOC,SAASC,OACJ,MAA1BH,EAAYI,OAAO,KACrBJ,EAAcA,EAAYK,UAAU,IAEa,MAA/CL,EAAYI,OAAOJ,EAAYM,OAAS,KAC1CN,EAAcA,EAAYK,UAAU,EAAGL,EAAYM,OAAS,IAG9D,IAAM9C,EAASwC,EAAYO,MAAM,KAC3BC,EAAW,GAOjB,OANAhD,EAAOiD,SAAQ,SAACC,GAAQ,IAAD,EACFA,EAAGH,MAAM,KADP,mBACd7C,EADc,KACTC,EADS,KAGrB6C,EAAS9C,GAAOC,KAGX6C,EAiDMpD,MA9Cf,WAAgB,IAAD,EACeuD,mBA1BfV,OAAOC,SAASU,KACXP,UAAU,IAyB+B,UAD9C,mBACNtC,EADM,KACE8C,EADF,KAGb,OACE,sBAAKlB,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,4CAEE,gCACE,uBAAOmB,QAAQ,eAAenB,UAAU,YAAxC,SACE,qBAAKA,UAAU,WAAf,sBAEF,uBACEoB,KAAK,WACLjB,GAAG,eACHH,UAAU,gBACVqB,KAAK,WAEP,qBAAKrB,UAAU,aAAf,SACE,qBAAIA,UAAU,QAAd,UACE,6BACE,mBAAGsB,KAAK,IAAIrB,QAAS,kBAAMiB,EAAU/D,IAAKE,SAA1C,sBAIF,6BACE,mBAAGiE,KAAK,IAAIrB,QAAS,kBAAMiB,EAAU/D,IAAKI,MAA1C,mBAIF,6BACE,mBAAG+D,KAAK,IAAIrB,QAAS,kBAAMiB,EAAU/D,IAAKM,MAA1C,8BAQV,sBAAKuC,UAAU,YAAf,UACE,cAAC,IAAD,CAAY5B,OAAQA,EAAQP,OAAQuC,MACpC,cAAC,EAAD,WC3DOmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdlB,OAAO0B,WAAaA,EAEpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASC,eAAe,SAM1ByC,M","file":"static/js/main.edcd721a.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport Editor, { DiffEditor, useMonaco, loader } from \"@monaco-editor/react\";\n\nimport searchEmbedSnippet from \"./snippets/search\";\nimport pinboardEmbedSnippet from \"./snippets/pinboard\";\nimport appEmbedSnippet from \"./snippets/app\";\n\nimport \"./playground.css\";\n\nexport enum Page {\n  Search = \"search\",\n  Viz = \"viz\",\n  App = \"app\",\n}\n\nconst snippetMap = {\n  [Page.Search]: searchEmbedSnippet,\n  [Page.Viz]: pinboardEmbedSnippet,\n  [Page.App]: appEmbedSnippet,\n};\n\ntype Params = { [key: string]: string };\n\nfunction compileSnippet(template: string, params: Params) {\n  let str = template;\n  for (let key in params) {\n    const val = params[key];\n    str = str.replace(new RegExp(`<%=${key}%>`, \"gi\"), val);\n  }\n\n  return str;\n}\n\nfunction getCompiledSnippet(pageId: Page, params: Params) {\n  return compileSnippet(snippetMap[pageId], params);\n}\n\nexport interface PlaygroundProps {\n  pageId: Page;\n  params: Params;\n}\n\nfunction Playground({ pageId, params }: PlaygroundProps) {\n  const editorRef = useRef(null);\n\n  function onEditorMount(editor: any, monaco: any) {\n    editorRef.current = editor;\n  }\n\n  function resetPreview() {\n    // @ts-ignore\n    document.getElementById(\"ts-embed\").innerHTML = \"\";\n  }\n\n  function executeCode() {\n    // @ts-ignore\n    const code = editorRef.current.getValue();\n    try {\n      resetPreview();\n      eval(code);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  return (\n    <div>\n      <Editor\n        height=\"90vh\"\n        width=\"500px\"\n        defaultLanguage=\"javascript\"\n        defaultValue=\"\"\n        value={getCompiledSnippet(pageId, params)}\n        options={{ minimap: { enabled: false } }}\n        onMount={onEditorMount}\n      />\n      <button className=\"runBtn\" onClick={executeCode}>\n        Run ▶\n      </button>\n    </div>\n  );\n}\n\nexport default Playground;\n","export default `\nconst { init, SearchEmbed } = TsEmbedSdk;\ninit({\n    thoughtSpotHost: '<%=tshost%>',\n    authType: 'None'\n});\n\nconst searchEmbed = new SearchEmbed(\n    document.getElementById('ts-embed'), \n    {\n        frameParams: {\n            width: '100%',\n            height: '100%'\n        }\n    });\n\nsearchEmbed.render({});\n`;\n","export default `\nconst { init, PinboardEmbed } = TsEmbedSdk;\ninit({\n    thoughtSpotHost: '<%=tshost%>',\n    authType: 'None'\n});\n\nconst vizEmbed = new PinboardEmbed(\n    document.getElementById('ts-embed'), \n    {\n        frameParams: {\n            width: '100%',\n            height: '100%'\n        }\n    });\n\nvizEmbed.render({\n    pinboardId: '<%=pinboardid%>'\n});\n`;\n","export default `\n`;\n","import \"./preview.css\";\n\nfunction Preview() {\n  return (\n    <div className=\"preview\">\n      <div id=\"ts-embed\"></div>\n    </div>\n  );\n}\n\nexport default Preview;\n","import React, { useState } from \"react\";\n\nimport Playground, { Page } from \"./playground\";\nimport Preview from \"./preview\";\n\nimport \"./App.css\";\n\nfunction getPageIdFromURL() {\n  const hash = window.location.hash;\n  let pageId = hash.substring(1);\n  return pageId as Page;\n}\n\nfunction getParams() {\n  let queryString = window.location.search;\n  if (queryString.charAt(0) === \"/\") {\n    queryString = queryString.substring(1);\n  }\n  if (queryString.charAt(queryString.length - 1) === \"/\") {\n    queryString = queryString.substring(0, queryString.length - 1);\n  }\n\n  const params = queryString.split(\"&\");\n  const paramMap = {};\n  params.forEach((kv) => {\n    const [key, val] = kv.split(\"=\");\n    // @ts-ignore\n    paramMap[key] = val;\n  });\n\n  return paramMap;\n}\n\nfunction App() {\n  const [pageId, setPageId] = useState(getPageIdFromURL() || \"search\");\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        ThoughtSpot Everywhere Test Bed\n        <nav>\n          <label htmlFor=\"id-show-menu\" className=\"show-menu\">\n            <div className=\"nav-icon\">☰</div>\n          </label>\n          <input\n            type=\"checkbox\"\n            id=\"id-show-menu\"\n            className=\"checkbox-menu\"\n            role=\"button\"\n          />\n          <div className=\"menu-block\">\n            <ul className=\"navUL\">\n              <li>\n                <a href=\"#\" onClick={() => setPageId(Page.Search)}>\n                  Search\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" onClick={() => setPageId(Page.Viz)}>\n                  Viz\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" onClick={() => setPageId(Page.App)}>\n                  App\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </header>\n      <div className=\"container\">\n        <Playground pageId={pageId} params={getParams()} />\n        <Preview />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as TsEmbedSdk from \"ts-embed-sdk\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\n// @ts-ignore\nwindow.TsEmbedSdk = TsEmbedSdk;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}